{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Movies33DS",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "movies333",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "union2"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "window1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Film as string,",
				"          Genre as string,",
				"          LeadStudio as string,",
				"          Audiencescore as string,",
				"          Profitability as string,",
				"          RottenTomatoes as string,",
				"          WorldwideGross as string,",
				"          Year as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('roundRobin', 3)) ~> source1",
				"source(output(",
				"          Film as string,",
				"          Genre as string,",
				"          LeadStudio as string,",
				"          Audiencescore as string,",
				"          Profitability as string,",
				"          RottenTomatoes as string,",
				"          WorldwideGross as string,",
				"          Year as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('roundRobin', 3)) ~> source2",
				"source1 select(mapColumn(",
				"          Film,",
				"          Genre,",
				"          RottenTomatoes,",
				"          Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(Film,",
				"          Genre,",
				"          Year),",
				"     count = count()) ~> aggregate1",
				"source2 select(mapColumn(",
				"          Film,",
				"          Genre,",
				"          RottenTomatoes,",
				"          Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 aggregate(groupBy(Film,",
				"          Genre,",
				"          Year),",
				"     count = count()) ~> aggregate2",
				"select2, select1 union(byName: true)~> union2",
				"union2, aggregate1 join(union2@Film == aggregate1@Film",
				"     && union2@Genre == aggregate1@Genre",
				"     && union2@Year == aggregate1@Year,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select4, aggregate2 join(select4@Film == aggregate2@Film",
				"     && select4@Genre == aggregate2@Genre",
				"     && select4@Year == aggregate2@Year,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          Film = select4@Film,",
				"          Genre = select4@Genre,",
				"          RottenTomatoes,",
				"          Year = select4@Year,",
				"          count1 = select4@count,",
				"          count2 = aggregate2@count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"join1 select(mapColumn(",
				"          Film = union2@Film,",
				"          Genre = union2@Genre,",
				"          RottenTomatoes,",
				"          Year = union2@Year,",
				"          count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select3 window(over(Film,",
				"          Genre,",
				"          Year),",
				"     asc(Film, true),",
				"     asc(Genre, true),",
				"     rownum = rowNumber()) ~> window1",
				"window1 alterRow(deleteIf(rownum>1)) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          Film,",
				"          Genre,",
				"          RottenTomatoes,",
				"          Year,",
				"          count1,",
				"          count2,",
				"          rownum",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}